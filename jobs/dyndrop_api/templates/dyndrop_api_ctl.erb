#!/bin/bash

export DD_JOB_DIR=/var/vcap/jobs/dyndrop_api
export RAILS_ENV=production
export PATH=/var/vcap/packages/ruby/bin:/var/vcap/packages/git/bin:$PATH

DD_PACKAGE_DIR=/var/vcap/packages/dyndrop_server
NFS_SHARE_GIT_REPOS=/var/vcap/dyndrop_api/git_repositories
NFS_SHARE_REPO_INSTANCES=/var/vcap/dyndrop_api/repo_instances

RUN_DIR=/var/vcap/sys/run/dyndrop_api
LOG_DIR=/var/vcap/sys/log/dyndrop_api
PIDFILE=$RUN_DIR/dyndrop_api.pid

ETH0_IP=$(ifconfig eth0 | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p')

export DYNDROP_API_CONFIG=$DD_JOB_DIR/config/dyndrop_api.yml
export BUNDLE_GEMFILE=$DD_PACKAGE_DIR/Gemfile
export HOME=/home/vcap # rake needs it to be set to run tasks
export TMPDIR=/var/vcap/data/dyndrop_api/tmp

export CONFIG_DIR=$DD_JOB_DIR/config

export RACK_ENV=production
export DYNDROP_SERVER_DATABASE_CONFIG="/var/vcap/jobs/dyndrop_api/config/dyndrop_api_database.yml"
export DYNDROP_SERVER_CONFIG="/var/vcap/jobs/dyndrop_api/config/dyndrop_api.yml"

# We absolutely need this for Dyndrop to work properly
export LANG="en_US.UTF-8"

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "Dyndrop API"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    mkdir -p $TMPDIR

    chown vcap:vcap $RUN_DIR
    chown vcap:vcap $LOG_DIR
    chown vcap:vcap $TMPDIR

    echo $$ > $PIDFILE
    chown vcap:vcap $PIDFILE

  
    mkdir -p /var/vcap/dyndrop_api


    modprobe nfs
    if grep -qs $NFS_SHARE_GIT_REPOS /proc/mounts; then
      echo "Found NFS mount, unmounting..."
      umount $NFS_SHARE_GIT_REPOS
      if [ $? -ne 0 ]; then
        echo "Failed to unmount NFS, exiting..."
        exit 1
      fi
    fi
    if [ -L $NFS_SHARE_GIT_REPOS ]; then
      unlink $NFS_SHARE_GIT_REPOS
    fi
    if [ -d $NFS_SHARE_GIT_REPOS ]; then
      rmdir $NFS_SHARE_GIT_REPOS
    fi

    if [ -L /var/vcap/jobs/debian_nfs_server -a -d <%= properties.dyndrop_api.nfs_server.export_git_repos_dir %> ]; then
      ln -s <%= properties.dyndrop_api.nfs_server.export_git_repos_dir %> $NFS_SHARE_GIT_REPOS
    else 
      mkdir -p $NFS_SHARE_GIT_REPOS

      if grep -qs $NFS_SHARE_GIT_REPOS /proc/mounts; then
        echo "Found NFS mount, unmounting..."
        umount $NFS_SHARE_GIT_REPOS
        if [ $? -ne 0 ]; then
          echo "Failed to unmount NFS, exiting..."
          exit 1
        fi
      fi

      echo "Mounting NFS..."
      mount -o timeo=10,intr,lookupcache=positive -t nfs <%= properties.dyndrop_api.nfs_server.address %>:<%= properties.dyndrop_api.nfs_server.export_git_repos_dir %> $NFS_SHARE_GIT_REPOS
      if [ $? != 0 ]; then
        echo "Cannot mount NFS, exiting..."
        exit 1
      fi

      chpst -u vcap:vcap touch $NFS_SHARE_GIT_REPOS/.nfs_test

      if [ $? != 0 ]; then
        echo "Failed to start: cannot write to NFS"
        exit 1
      fi
    fi



    if grep -qs $NFS_SHARE_REPO_INSTANCES /proc/mounts; then
      echo "Found NFS mount, unmounting..."
      umount $NFS_SHARE_REPO_INSTANCES
      if [ $? -ne 0 ]; then
        echo "Failed to unmount NFS, exiting..."
        exit 1
      fi
    fi
    if [ -L $NFS_SHARE_REPO_INSTANCES ]; then
      unlink $NFS_SHARE_REPO_INSTANCES
    fi
    if [ -d $NFS_SHARE_REPO_INSTANCES ]; then
      rmdir $NFS_SHARE_REPO_INSTANCES
    fi

    if [ -L /var/vcap/jobs/debian_nfs_server -a -d <%= properties.dyndrop_api.nfs_server.export_repo_instances_dir %> ]; then
      ln -s <%= properties.dyndrop_api.nfs_server.export_repo_instances_dir %> $NFS_SHARE_REPO_INSTANCES

    else 
      mkdir -p $NFS_SHARE_REPO_INSTANCES

      if grep -qs $NFS_SHARE_REPO_INSTANCES /proc/mounts; then
        echo "Found NFS mount, unmounting..."
        umount $NFS_SHARE_REPO_INSTANCES
        if [ $? -ne 0 ]; then
          echo "Failed to unmount NFS, exiting..."
          exit 1
        fi
      fi

      echo "Mounting NFS..."
      mount -o timeo=10,intr,lookupcache=positive -t nfs <%= properties.dyndrop_api.nfs_server.address %>:<%= properties.dyndrop_api.nfs_server.export_repo_instances_dir %> $NFS_SHARE_REPO_INSTANCES
      if [ $? != 0 ]; then
        echo "Cannot mount NFS, exiting..."
        exit 1
      fi

      chpst -u vcap:vcap touch $NFS_SHARE_REPO_INSTANCES/.nfs_test

      if [ $? != 0 ]; then
        echo "Failed to start: cannot write to NFS"
        exit 1
      fi
    fi


    cd $DD_PACKAGE_DIR
    chpst -u vcap:vcap bundle exec rake db:migrate >>$LOG_DIR/db_migrate.stdout.log 2>>$LOG_DIR/db_migrate.stderr.log
    if [ $? != 0 ]; then
      echo "Migrations failed"
      # TODO: what to do with other CCs if this failed?
      exit 1
    fi

    # Run dyndrop api as vcap user with unprivileged port, redirect to port 80 with iptables
    if [ "$(iptables -t nat -L | grep 'redir ports 9999')" == "" ]; then
      # External connections
      iptables -t nat -A PREROUTING -p tcp --dport <%= properties.dyndrop_api.port %> -j REDIRECT --to-ports 9999
      # Connections from within the machine
      iptables -t nat -A OUTPUT -p tcp -d $ETH0_IP --dport <%= properties.dyndrop_api.port %> -j REDIRECT --to-port 9999
    fi

    exec chpst -u vcap:vcap /var/vcap/packages/dyndrop_server/bin/dyndrop-server \
        -c /var/vcap/jobs/dyndrop_api/config/dyndrop_api.yml \
        -d /var/vcap/jobs/dyndrop_api/config/dyndrop_api_database.yml \
        -p 9999 \
        >>$LOG_DIR/dyndrop_api.stdout.log \
        2>>$LOG_DIR/dyndrop_api.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    if [ "$(iptables -t nat -L | grep 'redir ports 9999')" != "" ]; then
      iptables -t nat -D OUTPUT -p tcp -d $ETH0_IP --dport <%= properties.dyndrop_api.port %> -j REDIRECT --to-port 9999
      iptables -t nat -D PREROUTING -p tcp --dport <%= properties.dyndrop_api.port %> -j REDIRECT --to-ports 9999
    fi

    ;;
  *)
    echo "Usage: dyndrop_api_ctl {start|stop}"

    ;;

esac
