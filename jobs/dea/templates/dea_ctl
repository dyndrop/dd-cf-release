#!/bin/bash

export PATH=/var/vcap/packages/ruby/bin:$PATH
RUN_DIR=/var/vcap/sys/run/dea
LOG_DIR=/var/vcap/sys/log/dea
PIDFILE=$RUN_DIR/dea.pid
JOB_DIR=/var/vcap/jobs/dea

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "DEA"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    echo $$ > $PIDFILE

    # FIXME: Crap installation of PHP/Apache files.
    # Checking if the default scripts are looking for a packaged apache or not
    # Ruby necessary for the scripts packaged in the stager
    apt-get update
    apt-get install -y ruby apache2 libapache2-mod-php5 php5-cli php5-mysql php5-curl php5-gd php5-imap php5-memcache php5-mcrypt php-apc
    a2enmod rewrite

    # Some other crap code, while waiting for the new DEA..
    # Install dependencies for the PHP package scripts that handle the 
    # filesystem integration
    apt-get install rubygems ruby1.8-dev
    gem install json

    # Another part of crap code while we wait for dea_next to be ready and to 
    # make proper code for it.
    # Mount the backends of the filesystem gateway services
    <% if properties.filesystem_gateway %>
    modprobe nfs
    <% properties.filesystem_gateway.backends.each do |backend| %>
        
    mkdir -p <%= backend.mount %>

    if grep -qs <%= backend.mount %> /proc/mounts; then
      echo "Found NFS mount, unmounting..."
      umount <%= backend.mount %>
      if [ $? -ne 0 ]; then
        echo "Failed to unmount NFS, exiting..."
        exit 1
      fi
    fi

    echo "Mounting NFS..."
    mount -o timeo=10,intr,lookupcache=positive -t nfs <%= backend.host %>:<%= backend.export %> <%= backend.mount %>
    if [ $? != 0 ]; then
      echo "Cannot mount NFS, exiting..."
      exit 1
    fi

    chpst -u vcap:vcap touch <%= backend.mount %>/.nfs_test

    if [ $? != 0 ]; then
      echo "Failed to start: cannot write to NFS"
      exit 1
    fi
    <% end %>
    <% end %>

    # ephemeral port range
    echo "1024 65535" > /proc/sys/net/ipv4/ip_local_port_range

    # TCP_FIN_TIMEOUT
    # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
    # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
    # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
    # resources available for new connections. Addjust this in the presense of many connections sitting in the
    # TIME_WAIT state:

    echo 5 > /proc/sys/net/ipv4/tcp_fin_timeout

    # TCP_TW_RECYCLE
    # It enables fast recycling of TIME_WAIT sockets. The default value is 0 (disabled). The sysctl documentation
    # incorrectly states the default as enabled. It can be changed to 1 (enabled) in many cases. Known to cause some
    # issues with hoststated (load balancing and fail over) if enabled, should be used with caution.

    echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle

    # TCP_TW_REUSE
    # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
    # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

    echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse

    # Configure the core file location
    mkdir -p /var/vcap/sys/cores
    echo /var/vcap/sys/cores/core-%e-%s-%p-%t > /proc/sys/kernel/core_pattern

    ulimit -c unlimited

    <% if properties.syslog_aggregator %>
    /var/vcap/packages/syslog_aggregator/setup_syslog_forwarder.sh $JOB_DIR/config
    <% end %>

    exec nice -n -20 \
         /var/vcap/packages/ruby/bin/ruby /var/vcap/packages/dea/bin/dea \
         -c $JOB_DIR/config/dea.yml \
         >>$LOG_DIR/dea.stdout.log \
         2>>$LOG_DIR/dea.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: dea_ctl {start|stop}"

    ;;

esac
